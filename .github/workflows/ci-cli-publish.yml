name: CI - Build and Publish to PyPI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5.6.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build pytest pipx
          pip install -e .

      - name: Test CLI installation (pip)
        run: |
          vitalis health

      - name: Test CLI extraction (pip)
        run: |
          vitalis extract tests/example-projects/python-project/requirements.txt

      - name: Test pipx installation
        run: |
          pip uninstall -y vitalis
          pipx install .
          vitalis health

      - name: Test python -m pipx installation  
        run: |
          pipx uninstall vitalis
          python -m pipx install .
          vitalis health

      - name: Verify binary on PATH
        run: |
          which vitalis
          vitalis --help

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: dist
          path: dist/

  publish-testpypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4.3.0
        with:
          name: dist
          path: dist/

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          verbose: true

      - name: Output package URL
        run: |
          echo "Package published to Test PyPI:"
          echo "https://test.pypi.org/project/vitalis/"

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4.3.0
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true

      - name: Output package URL
        run: |
          echo "Package published to PyPI:"
          echo "https://pypi.org/project/vitalis/"